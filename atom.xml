<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://gXiaofei.github.io</id>
    <title>gXiaofei</title>
    <updated>2020-08-31T15:07:49.214Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://gXiaofei.github.io"/>
    <link rel="self" href="https://gXiaofei.github.io/atom.xml"/>
    <subtitle>前端向前</subtitle>
    <logo>https://gXiaofei.github.io/images/avatar.png</logo>
    <icon>https://gXiaofei.github.io/favicon.ico</icon>
    <rights>All rights reserved 2020, gXiaofei</rights>
    <entry>
        <title type="html"><![CDATA[webpack2]]></title>
        <id>https://gXiaofei.github.io/post/webpack2/</id>
        <link href="https://gXiaofei.github.io/post/webpack2/">
        </link>
        <updated>2020-08-31T12:55:27.000Z</updated>
        <content type="html"><![CDATA[<h2 id="file-loader">file-loader</h2>
<p>处理静态资源模块<br>
原理是把打包入口中识别出的资源模块，移动到输出目录，并且返回一个地址名称</p>
<pre><code class="language-javascript">yarn add file-loader -D

module: {
    rules: [
        test: /\.(png|jpe?g|gif)/,
        // use 使用一个loader可以用对象，字符串，两个loader需要用数组
        use: {
            loader: 'file-loader',
            // options额外的配置 ，比如资源名称
            options: {
                // placeholder 占位符  [name] 老资源模块的名称
                // [ext] 老资源模块的后缀
                // [hash]
                name: '[name]_[hash:6].[ext]',
                // 打包后存放的位置
                outputPath: 'images/'
            }
        }
    ]
}

</code></pre>
<p><strong>处理字体</strong></p>
<pre><code class="language-javascript"> 
//css @font-face {
font-family: &quot;webfont&quot;;
font-display: swap;
src: url(&quot;webfont.woff2&quot;) format(&quot;woff2&quot;);
}
body {
background: blue;
font-family: &quot;webfont&quot; !important;
}
//webpack.config.js {
test: /\.(eot|ttf|woff|woff2|svg)$/,
use: &quot;file-loader&quot; }
</code></pre>
<h2 id="url-loader">url-loader</h2>
<p>file-loader 加强版本<br>
url-loader内部使⽤用了了file-loader,所以可以处理理file-loader所有 的事情，但是遇到jpg格式的模块，会把该图⽚片转换成base64格 式字符串串，并打包到js⾥里里。对⼩小体积的图⽚片⽐比较合适，⼤大图⽚不 合适。</p>
<pre><code class="language-javascript">yarn add url-loader -D

module: {
    rules: [
        test: /\.(png|jpe?g|gif)/,
        use: {
            loader: 'url-loader',
            options: {
                name: &quot;[name]_[hash].[ext]&quot;, 
                outputPath: &quot;images/&quot;, 
                //小于2048，才转换成base64  单位 字节
                // 太大没必要转 ，转出来的字符串都很大 
                limit: 2048
            }
        }
    ]
}
</code></pre>
<h2 id="less-less-loader">less less-loader</h2>
<p>利用less-loader 把less转换成css</p>
<pre><code class="language-javascript">yarn less less-loader -D
{
    test: /\.less/,
    use: ['sytle-loader', 'css-loader', 'less-loader']
}
</code></pre>
<h2 id="postcss-loader">postcss-loader</h2>
<p>给css自动添加前缀， 一般处理css3样式，做兼容<br>
https://caniuse.com/</p>
<blockquote>
<p>yarn add postcss-loader autoprefixer -D</p>
</blockquote>
<p>webapck.config.js</p>
<pre><code class="language-javascript">{
    test: /\.css/,
    // postcss-loader 要在css-loader 之前
    use: ['style-loader', 'css-loader', 'postcss-loader']
}
</code></pre>
<p>新建postcss.config.js</p>
<pre><code class="language-javascript">// 给css添加前缀 webkit .. 
const antoprefixer = require('autoprefixer');

module.exports = {
    plugins: [
        // postcss 利用autoprefixer 添加前缀标准
        // last 2 versions 浏览器的最近两个版本
        // &gt;1% 全球浏览器市场份额 &gt;1%的浏览器
        autoprefixer({
            overrideBrowserslist: ['last 2 versions', '&gt;1%']
        })
    ]
}
</code></pre>
<h2 id="mini-css-extract-plugin">mini-css-extract-plugin</h2>
<p>提取css<br>
建议在开发环境不开启，对热更新模块不太友好</p>
<pre><code class="language-javascript">const MiniCssExtractPlugin = require('mini-css-extract-plugin');

const devMode = process.NODE_ENV === 'development';

modules: [
    {
        test: /\.(c|le)ss$/,
        use: [
            // 开发环境不开启  替换style-loader 使用MiniCssExtractPlugin.loader
            devMode ? 'style-loader' : MiniCssExtractPlugin.loader,
            {
                loader: 'css-loader',
                options: {
                    // 开启 css modules 默认不开启
                    modules: true,
                }
            },
            // postcss 要在css-loader之前 一般处理css3 做浏览器兼容
            'postcss-less',
            'less-loader'
        ]
    }
],
plugins: [
    // 记得有个 plugin要写
    new MiniCssExtractPlugin({
        filename: devMode ? &quot;css/[name].css&quot; : &quot;css/[name].[hash:6].css&quot;,
    })
]
</code></pre>
<h2 id="sourcemap">sourceMap</h2>
<p>源代码与打包后的代码的映射关系，通过sourceMap定位到源代码<br>
在dev模式中，默认开启，关闭的话， 可以在配置文件里  <code>devtool: 'none'</code></p>
<p>eval: 速度最快，使用eval包裹模块代码<br>
source-map: 产生.map文件<br>
cheap: 较快，不包含列信息 报错位置的列位置<br>
module: 第三方模块，包含loader的sourcemap（比如jsx to js， babel的sourcemap）<br>
inline: 将.map 作为DataURL嵌入js中，不单独生成.map文件</p>
<p>推荐设置 生产环境不建议开启</p>
<blockquote>
<p>devtool: devMode ? &quot;cheap-module-eval-source-map&quot; : &quot;none&quot;</p>
</blockquote>
<h2 id="webpack-dev-server">webpack-dev-server</h2>
<p>提升开发效率的利器<br>
每次改完代码都需要重新打包，打开浏览器，刷新一次，很麻烦</p>
<blockquote>
<p>yarn add webpack-dev-server -D</p>
</blockquote>
<p>修改下package.json</p>
<pre><code class="language-javascript">&quot;scripts&quot;: {
    &quot;server&quot;: &quot;webpack-dev-server&quot;
}
</code></pre>
<p>webpack.config.js</p>
<pre><code class="language-javascript">// 有个devServer 字段可以配置
devServer: {
    contentBase: './dist',
    open: true,
    port: 8081
}
</code></pre>
<p>启动</p>
<blockquote>
<p>npm run dev</p>
</blockquote>
<p>启动服务后，会发现dist目录下的文件没有了，这是因为devServer把打包后的模块不会放在dist目录下，而是放在内存中，从而提升速度</p>
<p>mock本地数据， 解决跨域</p>
<p>在webpack.config.js devServer 中 配置proxy</p>
<pre><code class="language-javascript">devServer: {
    contentBase: './dist',
    open: true,
    port: 8081,
    proxy: {
        // api 的请求代理到9092
        '/api': {
            target: 'http://localhost:9092'
        }
    }
}

// 协议 域名 端口 不一致 都会产生跨域

// 请求
// 这样写请求没代理会产生跨域问题  端口号不一样
axios.get('http://localhost:9092/api/info').then(res =&gt; {
    console.log(res)
})

// 写了proxy代理后修改
axios.get('/api/info').then(res =&gt; {
    console.log(res)
})
</code></pre>
<p>在devServer中存在 before after 两个钩子函数</p>
<pre><code class="language-javascript">devServer: {
        // 建议使用绝对路径。
        contentBase: path.resolve(__dirname, &quot;./dist&quot;),
        port: 8080,
        open: true,
        // 代理
        proxy: {
            &quot;/api&quot;: {
                target: &quot;http://localhost:9092&quot;,
            },
        },
        // mock server 集成了 express， 可以做本地的mock请求
        before(app, server) {
            app.get(&quot;/api/info&quot;, (req, res) =&gt; {
                res.json({
                    hello: &quot;express3&quot;,
                });
            });
        },
    }
</code></pre>
<h2 id="hot-module-replacement-hmr-热模块替换">Hot Module Replacement (HMR: 热模块替换)</h2>
<ul>
<li>不支持抽离出css 使用style-loader来处理css</li>
</ul>
<p>启动hmr</p>
<pre><code class="language-javascript">// webpack.config.js

devServer: {
     contentBase: './dist',
    open: true,
    port: 8081,
    proxy: {
        // api 的请求代理到9092
        '/api': {
            target: 'http://localhost:9092'
        }
    },
    hot: true, // 开启热替换
    // 即便HMR不生效，浏览器也不自动刷新，就开启hotOnly
    hotOnly: true
}
</code></pre>
<p>在配置头引入 webpack</p>
<pre><code class="language-javascript">const webpack = require('webpack');
</code></pre>
<p>在plugins配置处添加：</p>
<pre><code class="language-javascript">plugins: [
    new webpack.HotModuleReplacementPlugin()
]
</code></pre>
<p><em>注意： 启动HMR后，css抽离不会生效，还有不支持contenthash，chunkhash</em></p>
<p>上面的配置只能做到css 样式上的热替换</p>
<p><strong>处理js模块HMR</strong></p>
<p>需要使用<code>module.hot.accep</code>来观察模块更新，从而更新</p>
<p>案例：</p>
<pre><code class="language-javascript">
// counter.js
function counter() {
    var div = document.getElement('div');
    div.setAttribute(&quot;id&quot;, &quot;counter&quot;); div.innerHTML = 1;
    div.onclick = function() {
    div.innerHTML = parseInt(div.innerHTML, 10) + 1; };
    document.body.appendChild(div);
}

export default counter;

// number.js
function number() {
    var div = document.createElement(&quot;div&quot;); 
    div.setAttribute(&quot;id&quot;, &quot;number&quot;); 
    div.innerHTML = 13000; 
    document.body.appendChild(div);
}
export default number;

// index.js
import counter from './counter';
import number from './number';

counter();
number();

// 这里做js的热替换
if(module.hot) {
    // 监听 number 文件
    module.hot.accept('./number', function (){
        // 做出相应的处理
        // 一般框架都会有自己的热替换处理 比如react 有 react hot loader 
        // vue vue-loader 等等
        document.body.removeChild(document.getElementById(&quot; number&quot;));
        number();
    })
}
</code></pre>
<h2 id="babel">babel</h2>
<p>...</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[webpack]]></title>
        <id>https://gXiaofei.github.io/post/webpack/</id>
        <link href="https://gXiaofei.github.io/post/webpack/">
        </link>
        <updated>2020-08-29T01:30:48.000Z</updated>
        <content type="html"><![CDATA[<p><code>webpack</code> 是一个打包模块化<code>javascript</code>的工具，它会从入口模块触发，识别出源码中的模块化导入语句，递归的值找出入口文件的所有依赖，将入口和其所有的依赖打包到一个单独的文件中。</p>
<p>安装<code>webpack</code> v4+版本时， 需要额外的安装webpack-cli</p>
<p><code>npm install webpack webpack-cli -D</code></p>
<ul>
<li><code>webpack</code> 默认支持JS模块和JSON模块</li>
<li>支持<code>CommonJS</code> <code>Es</code>  <code>module</code> <code>AMD</code>等模块类型</li>
<li><code>webpack4</code> 支持零配置使用，但是很弱，稍微复杂些的场景都需要额外扩展</li>
</ul>
<p>一般配置</p>
<pre><code class="language-javascript">// webpack 基于nodeJS
const path = require('path')

module.exports = {
    // webpack 构建的入口 必填  可以是字符串 数组 对象
    // 这里使用相对路径
    entry: './src/index.js',
    // webpack 构建的出口 
    output: {
        // 这里的path使用绝对路径
        path: path.resolve(__dirname, './dist'),
        // 输出的js可以使用占位符
        filename: '[name].[hash:6].js'
    }
}
</code></pre>
<h3 id="entry"><code>entry</code></h3>
<p>入口，可以是字符串 数组 对象，是对象就是多入口，多入口需要对应多出口</p>
<pre><code class="language-javascript">// 字符串
entry: './src/index.js'
// 数组
entry: ['./src/index.js', './src/login.js']
// 对象 多入口 多个chunk 一个chunk对应一个文件 
entry: {index: './src/index.js', login: './src/login.js'}
</code></pre>
<h3 id="output"><code>output</code></h3>
<p>出口 webpack经过一系列的处理并得出最终想要的代码后的输出结果</p>
<pre><code class="language-javascript">output: {
    // 输出文件在磁盘的位置，这里是绝对路径
    path: path.resolve(__dirname, './dist'),
    // 输出的文件名称
    filename: '[name].[hash:6].js'
}

// 多入口处理
output: {
    // 输出文件在磁盘的位置，这里是绝对路径
    path: path.resolve(__dirname, './dist'),
    // 利用占位符 文件名称不能重复
    filename: '[name].[chunkhash:6].js'
}
</code></pre>
<h3 id="mode"><code>mode</code></h3>
<p>用来指定当前的构建环境<br>
<img src="https://gXiaofei.github.io/post-images/1598666724671.jpg" alt="" loading="lazy"></p>
<p><code>mode: development</code> 开发阶段开启，有利于热更新的处理，识别哪个模块变化<br>
<code>mode: production</code> 生产阶段开启，会帮助模块压缩，处理一些副作用等功能</p>
<h3 id="loader"><code>loader</code></h3>
<p>模块解析，模块转化器，用于把模块原内容按照需要转换成新内容<br>
因为<code>webpack</code> 默认支持<code>.json</code> <code>.js</code>模块，不支持其他格式的模块<br>
<code>loader</code>的执行顺序 从后往前</p>
<pre><code class="language-javascript">...
module: {
    // loader 模块转换
    rules: [
        {
            test: /\.css/i,
            // css-loader 言简意赅 把css内容加到js内容中去
            // style-loader 从js中提取css的loader 在html创建style标签，把css内容放在这个style标签中
            use: ['style.loader', 'css-loader']
        }
    ]
}

// 开启css module

use: [
    'style-loader',
    {
        loader: 'css-loader',
        options: {
            // 开启css modules
            modules: true
        }
    }
]
...
</code></pre>
<p>常见的loader</p>
<pre><code class="language-javascript">style-loader
css-loader
less-loader
sacc-loader
ts-loader // 将ts转换成js
babel-loader // 将ES6, 7等就是新特性语法
</code></pre>
<h3 id="module"><code>module</code></h3>
<p>模块，在<code>webpack</code>里一切皆模块，一个模块对应一个文件。<code>webpack</code>会从配置的Entry 开始递归找出所有依赖的模块<br>
当<code>webpack</code>处理到不认识的模块时，需要在<code>webpack</code>中的module处进行配置，当检测到是什么格式的模块，使用什么<code>loader</code>来处理</p>
<pre><code class="language-javascript">module: {
    rules: [
        {
            test: /\.xxx$/, // 指定匹配规则
            use: {
                loader: 'xxx-loader' // 指定使用的loader
            }
        }
    ]
}
</code></pre>
<h3 id="plugins"><code>plugins</code></h3>
<p>作用于<code>webpack</code>打包整个过程<br>
<code>webpack</code>的打包过程是有（生命周期概念）钩子<br>
<code>plugins</code>可以在<code>webpack</code>运行到某个阶段的时候，帮你做一些事情，类似于生命周期的概念，有同步，异步的执行</p>
<p>扩展插件，在<code>webpack</code>构建流程中的特定时间注入扩展逻辑来改变构建结果或你想要的事情<br>
作用于整个构建过程</p>
<p>const webpack = require('webpack');  // 访问内置插件</p>
<ul>
<li>HtmlWebpackPlugin<br>
<code>htmlwebpackplugin</code> 会在打包结束后，自动生成一个html文件，并把打包生成的js模块引入到高html中</li>
</ul>
<pre><code class="language-javascript">yarn add html-webpacl-plugin -D
 
title: ⽤用来⽣生成⻚页⾯面的 title 元素
filename: 输出的 HTML ⽂文件名，默认是 index.html, 也可以直 接配置带有⼦子⽬目录。
template: 模板⽂文件路路径，⽀支持加载器器，⽐比如 html!./index.html
inject: true | 'head' | 'body' | false ,注⼊入所有的资 源到特定的 template 或者 templateContent 中，如果设置为 true 或者 body，所有的 javascript 资源将被放置到 body 元 素的底部，'head' 将放置到 head 元素中。
favicon: 添加特定的 favicon 路路径到输出的 HTML ⽂文件中。 minify: {} | false , 传递 html-minifier 选项给 minify 输出
hash: true | false, 如果为 true, 将添加⼀一个唯⼀一的 webpack 编译 hash 到所有包含的脚本和 CSS ⽂文件，对于解除 cache 很有⽤用。
cache: true | false，如果为 true, 这是默认值，仅仅在⽂文件 修改之后才会发布⽂文件。
showErrors: true | false, 如果为 true, 这是默认值，错误 信息会写⼊入到 HTML ⻚页⾯面中
chunks: 允许只添加某些块 (⽐比如，仅仅 unit test 块) chunksSortMode: 允许控制块在添加到⻚页⾯面之前的排序⽅方式，⽀支持 的值:'none' | 'default' | {function}-default:'auto' excludeChunks: 允许跳过某些块，(⽐比如，跳过单元测试的块)


// 案例
const path = require('path')
const htmlWebpackPlugin = require('html-webpack-plugin')
module.exports = {
    ...
    plugins: [
        new htmlWebpackPlugin({
            title: 'My app',
            filename: 'app.html',
            template: './src/index.html'
        })
    ]
}

//src/index.html
&lt;!DOCTYPE html&gt; &lt;html lang=&quot;en&quot;&gt;
&lt;head&gt;
&lt;meta charset=&quot;UTF-8&quot; /&gt;
&lt;meta name=&quot;viewport&quot; content=&quot;width=device-
width, initial-scale=1.0&quot; /&gt;
&lt;meta http-equiv=&quot;X-UA-Compatible&quot;
content=&quot;ie=edge&quot; /&gt;
&lt;title&gt;&lt;%= htmlWebpackPlugin.options.title %&gt;
&lt;/title&gt;
  &lt;/head&gt;
&lt;body&gt;
&lt;div id=&quot;root&quot;&gt;&lt;/div&gt;
  &lt;/body&gt;
&lt;/html&gt;
</code></pre>
<ul>
<li>clean-webpack-plugin<br>
每次构建会自动清除上次构建的文件</li>
</ul>
<pre><code class="language-javascript">yarn add clean-webpack-plugin -D

const {CleanWebpackPlugin} = require('clean-webpack-plugin');

...

plugins: [
    new CleanWebpackPlugin()
]
</code></pre>
<p>占位符<br>
name</p>
<p>hash 整个项目的hash值，每构建一次，就会有一个hash，文件内容不改变，hash值不变<br>
hash 可以作用于缓存<br>
chunkhash 根据不同入口entry进行依赖解析， 构成对应的chunk，生成对应的chunkhash，一般用于多入口<br>
只要组成entry的内容模块没有改变，则对应的chunkhash不变<br>
contenthash 一般用于抽离出的css文件 跟内容绑定，文件内容不变，hash不变</p>
<p>id</p>
<p>使用 自定义配置文件： 比如webpackconfig.js ，可以通过 --config webpackconfig.js 指定webpack使用哪个配置文件来执行构建</p>
]]></content>
    </entry>
</feed>